function notLoadedVector(e,i,t){return notLoadedVectors.push([e,i,t]),!1}function handleMouseMove(e){var i,t,s;null==(e=e||window.event).pageX&&null!=e.clientX&&(t=(i=e.target&&e.target.ownerDocument||document).documentElement,s=i.body,e.pageX=e.clientX+(t&&t.scrollLeft||s&&s.scrollLeft||0)-(t&&t.clientLeft||s&&s.clientLeft||0),e.pageY=e.clientY+(t&&t.scrollTop||s&&s.scrollTop||0)-(t&&t.clientTop||s&&s.clientTop||0));var o,h,r=mousePos={x:e.pageX,y:e.pageY};if(r){var n=r.x-=mouseOffsetX,c=r.y-=mouseOffsetY,a=window.innerWidth/Physics.width,l=window.innerHeight/Physics.height;o=Math.round(n/a),h=Math.round(c/l)}else console.warn("[CONTROL_MOUSE] UpdateMousePos called when no mouse movement was seen");relMousePos={x:o,y:h}}notLoadedVectors=[];var Physics={element:null,defaultSpaceChar:" ",defaultShapeChar:"*",defaultNewlineChar:"<br>",startString:"PHYV5:<br><br>",gravitationalConstant:new notLoadedVector("gravitationalConstant",0,.05),frictionConstant:new notLoadedVector("frictionConstant",1,0),weightPerCharacter:.4,terminalVelocity:7,ticksPerSecond:60,updatesPerSecond:40,renderPerSecond:50,renderInColor:!1,now:Date.now(),nextTick:Date.now(),nextUpdate:Date.now(),nextRender:Date.now(),lastUpdate:Date.now(),oldDelta:0,enableDeltaTimeCalculations:!0,simpleDeltaCalculations:!0,forceAverageDelta:!1,moreEfficientPhysics:!0,debugMode:!1,allGravity:!1,recalculateWeightOnFrame:!0,updateColorMeshOnVectorChange:!0,width:window.innerWidth,height:window.innerHeight,lineHeight:.65,initialLineHeight:.83,collisionAccuracy:.5,ignoreMeshSize:!1,collisionEfficiency:-1,inefficientArr:[],bodyFontSize:16,renderBuffer:[],renderString:[],charsPerFrame:0,renderLoopPasts:[],renderLoopNext:0,renderLoopShapes:[],shape:function(e,i){if(void 0===e||void 0===i)throw new Error("Type or options incomplete when constructing shape");if(this.x=i.x||0,this.y=i.y||0,this.mesh=[],this.colorMesh=[],this.onlyWriteNonemptyPixels=i.onlyWriteNonemptyPixels,void 0===this.onlyWriteNonemptyPixels&&(this.onlyWriteNonemptyPixels=!0),this.replaceWithSpace=i.replaceWithSpace||!1,void 0===this.replaceWithSpace&&(this.replaceWithSpace=!1),this.shapeArrayNum=Physics.renderLoopShapes.length,Physics.renderLoopShapes[Physics.renderLoopShapes.length]=this,this.color=i.color||"black",void 0===this.color&&(this.color="black"),this.UUID=generateUUID(),this.gravity=i.gravity||!1,void 0!==this.gravity&&void 0!==i.gravity||(this.gravity=!1),this.velocity=new Physics.util.vec2d(0,0),this.collide=i.collide,void 0===this.collide&&(this.collide=!0),this.overrideRenderLimit=i.overrideRenderLimit||!1,void 0===this.overrideRenderLimit&&(this.overrideRenderLimit=!1),void 0===i.enableUp&&(i.enableUp=!0),void 0===i.enableDown&&(i.enableDown=!0),void 0===i.enableLeft&&(i.enableLeft=!0),void 0===i.enableRight&&(i.enableRight=!0),this.overrideSpacesInCustomShape=i.overrideSpacesInCustomShape||!1,this.overrideSpacesInCustomShape,this.overrideSpacesInCustomShape=!1,this.enableUp=i.enableUp,this.enableDown=i.enableDown,this.enableLeft=i.enableLeft,this.enableRight=i.enableRight,this.pointTable=[],this.updPointTable=[],this.collisionBottom=!1,this.collisionTop=!1,this.collisionRight=!1,this.collisionLeft=!1,this.character=i.character||Physics.defaultShapeChar,this.character.length>1&&(this.character=this.character.substring(0,1)),this.type=e,"rect"==e)if(this.height=i.height||10,this.width=i.width||10,this.filled=i.filled,void 0===this.filled&&(this.filled=!0),this.filled)for(o=0;o<this.height;o++){this.mesh[o]="",this.colorMesh[o]="";for(d=0;d<this.width;d++)this.mesh[o]+=this.character,this.colorMesh[o]+="<span style='color: "+this.color+";'>"+this.character+"</span>",this.pointTable[this.pointTable.length]=[o,d]}else for(o=0;o<this.height;o++){this.mesh[o]="",this.colorMesh[o]="";for(d=0;d<this.width;d++)0==o||o==this.height-1||0==d||d==this.width-1?(this.mesh[o]+=this.character,this.colorMesh[o]+="<span style='color: "+this.color+";'>"+this.character+"</span>",this.pointTable[this.pointTable.length]=[o,d]):(this.mesh[o]+=Physics.defaultSpaceChar,this.colorMesh[o]+=Physics.defaultSpaceChar)}else if("line"==e){this.length=i.length||10,this.mesh[0]="";for(o=0;o<this.length;o++)this.mesh[0]+=this.character,this.colorMesh[0]+="<span style='color: "+this.color+";'>"+this.character+"</span>",this.pointTable[this.pointTable.length]=[o,0]}else if("triangle"==e){this.height=i.height||i.width/2,this.width=i.width||2*i.height;for(o=0;o<this.height;o++){this.mesh[o]="",this.colorMesh[o]="";for(d=0;d<this.width;d++)this.mesh[o]+=Physics.defaultSpaceChar,this.colorMesh[o]+=Physics.defaultSpaceChar}for(var t=this.width/2,s=1,o=0;o<this.height;o++){for(d=0;d<s;d++)this.mesh[o]=this.mesh[o].replaceAt(t+d,this.character),this.colorMesh[o]=this.mesh[o].replaceAt(t+d,"<span style='color: "+this.color+";'>"+this.character+"</span>"),this.pointTable[this.pointTable.length]=[o,d];t-=1,s+=2}}else if("custom"==e)if(void 0===i.mesh||"object"!=typeof i.mesh)console.error("[SHAPE_CONSTRUCT] Mesh for custom object is undefined");else{this.width=0,this.height=i.mesh.length;for(o=0;o<i.mesh.length;o++){this.mesh[o]=[],this.colorMesh[o]=[],i.mesh[o].length>this.width&&(this.width=i.mesh[o].length);for(d=0;d<i.mesh[o].length;d++)this.mesh[o]+=i.mesh[o][d]," "==i.mesh[o][d]&&!0===this.overrideSpacesInCustomShape?this.colorMesh[o]+=" ":(this.colorMesh[o]+="<span style='color: "+this.color+";'>"+i.mesh[o][d]+"</span>",this.pointTable[this.pointTable.length]=[o,d])}}else if("circle"==e)if(this.radius=i.radius||10,this.filled=i.filled||!1,1==this.filled)for(var h=this.radius,r=this.radius,o=0;o<=2*this.radius;o++){this.mesh[o]="",this.colorMesh[o]="";for(d=0;d<=2*this.radius;d++){var n=h-d,c=r-o;n*n+c*c<=this.radius*this.radius?(this.mesh[o]+=this.character,this.colorMesh[o]+="<span style='color: "+this.color+";'>"+this.character+"</span>",this.pointTable[this.pointTable.length]=[o,d]):(this.mesh[o]+=Physics.defaultSpaceChar,this.colorMesh[o]+=Physics.defaultSpaceChar)}}else if("cool"==this.filled){for(o=0;o<=2*this.radius;o++){this.mesh[o]="",this.colorMesh[o]="";for(d=0;d<=2*this.radius;d++)(u=Math.sqrt((o-this.radius)*(o-this.radius)+(d-this.radius)*(d-this.radius)))>this.radius-.5&&u<this.radius+.5?(this.pointTable[this.pointTable.length]=[o,d],this.mesh[o]+=this.character,this.colorMesh[o]+="<span style='color: "+this.color+";'>"+this.character+"</span>"):(this.mesh[o]+=Physics.defaultSpaceChar,this.colorMesh[o]+=Physics.defaultSpaceChar)}for(var a=this.radius*Math.sin(45),o=0-a+1;o<0+a;o++)for(d=0-a+1;d<0+a;d++){var l=Math.round(o)+this.radius,y=Math.round(d)+this.radius;this.pointTable[this.pointTable.length]=[o,d],this.mesh[y]=this.mesh[y].replaceAt(l,this.character),this.colorMesh[y]=this.colorMesh[y].replaceAt(l,"<span style='color: "+this.color+";'>"+this.character+"</span>")}}else for(o=0;o<=2*this.radius;o++){this.mesh[o]="",this.colorMesh[o]="";for(var d=0;d<=2*this.radius;d++){var u=Math.sqrt((o-this.radius)*(o-this.radius)+(d-this.radius)*(d-this.radius));u>this.radius-.5&&u<this.radius+.5?(this.mesh[o]+=this.character,this.colorMesh[o]+="<span style='color: "+this.color+";'>"+this.character+"</span>",this.pointTable[this.pointTable.length]=[o,d]):(this.mesh[o]+=Physics.defaultSpaceChar,this.colorMesh[o]+=Physics.defaultSpaceChar)}}else console.error("[SHAPE_CONSTRUCT] Shape "+this.type+" not found. There may be errors rendering.");this.pointTable.uniqueify(),this.update(),this.recalculateWeight()},shape3d:function(e,i){if(this.prototype=Object.create(Physics.shape.prototype),this.prototype.constructor=this,this.x=i.x||0,this.y=i.y||0,this.z=i.z||0,this.mesh=[],this.colorMesh=[],this.onlyWriteNonemptyPixels=i.onlyWriteNonemptyPixels,void 0===this.onlyWriteNonemptyPixels&&(this.onlyWriteNonemptyPixels=!0),this.replaceWithSpace=i.replaceWithSpace||!1,void 0===this.replaceWithSpace&&(this.replaceWithSpace=!1),this.shapeArrayNum=Physics.renderLoopShapes.length,Physics.renderLoopShapes[Physics.renderLoopShapes.length]=this,this.color=i.color||"black",void 0===this.color&&(this.color="black"),this.UUID=generateUUID(),this.gravity=i.gravity||!1,void 0!==this.gravity&&void 0!==i.gravity||(this.gravity=!1),this.velocity=new Physics.util.vec2d(0,0),this.collide=i.collide,void 0===this.collide&&(this.collide=!0),this.overrideRenderLimit=i.overrideRenderLimit||!1,void 0===this.overrideRenderLimit&&(this.overrideRenderLimit=!1),void 0===i.enableUp&&(i.enableUp=!0),void 0===i.enableDown&&(i.enableDown=!0),void 0===i.enableLeft&&(i.enableLeft=!0),void 0===i.enableRight&&(i.enableRight=!0),this.enableUp=i.enableUp,this.enableDown=i.enableDown,this.enableLeft=i.enableLeft,this.enableRight=i.enableRight,this.pointTable=[],this.updPointTable=[],this.faces=[],this.vertices=[],this.collisionBottom=!1,this.collisionTop=!1,this.collisionRight=!1,this.collisionLeft=!1,this.camera=i.camera,void 0===this.camera&&(this.camera=new Physics.orthographicCamera),this.character=i.character||Physics.defaultShapeChar,this.character.length>1&&(this.character=this.character.substring(0,1)),this.type=e,"cube"==e){this.height=i.height||10,this.width=i.width||10,this.depth=i.depth||10,void 0===this.height&&(this.height=10),void 0===this.width&&(this.width=10),void 0===this.depth&&(this.depth=10);var t=i.height/2,s=i.width/2,o=i.depth/2;if(void 0===t)return console.error("[3DSHAPE_CONSTRUCT] Height undefined in options of shape, please set it!");if(void 0===s)return console.error("[3DSHAPE_CONSTRUCT] Width undefined in options of shape, please set it!");if(void 0===o)return console.error("[3DSHAPE_CONSTRUCT] Depth undefined in options of shape, please set it!");Physics.debugMode&&console.log("[3DSHAPE_CONSTRUCT] Construct 3d shape hr: "+t+", wr: "+s+", dr: "+o+", size: "+(t+s+o)/3),this.center=new Physics.util.point3d(this.x-s,this.y-t,this.z-o),this.size=(t+s+o)/3,this.updateVertices=function(e,i){this.vertices=[new Physics.util.point3d(e.x-i,e.y-i,e.z+i),new Physics.util.point3d(e.x-i,e.y-i,e.z-i),new Physics.util.point3d(e.x+i,e.y-i,e.z-i),new Physics.util.point3d(e.x+i,e.y-i,e.z+i),new Physics.util.point3d(e.x+i,e.y+i,e.z+i),new Physics.util.point3d(e.x+i,e.y+i,e.z-i),new Physics.util.point3d(e.x-i,e.y+i,e.z-i),new Physics.util.point3d(e.x-i,e.y+i,e.z+i)]},this.updateVertices(this.center,this.size),this.faces=[[this.vertices[0],this.vertices[1],this.vertices[2],this.vertices[3]],[this.vertices[3],this.vertices[2],this.vertices[5],this.vertices[4]],[this.vertices[4],this.vertices[5],this.vertices[6],this.vertices[7]],[this.vertices[7],this.vertices[6],this.vertices[1],this.vertices[0]],[this.vertices[7],this.vertices[0],this.vertices[3],this.vertices[4]],[this.vertices[1],this.vertices[6],this.vertices[5],this.vertices[2]]]}else if("pyramid"==e){this.height=i.height||10,this.width=i.width||10,this.depth=i.depth||10,void 0===this.height&&(this.height=10),void 0===this.width&&(this.width=10),void 0===this.depth&&(this.depth=10);var t=i.height/2,s=i.width/2,o=i.depth/2;if(void 0===t)return console.error("[3DSHAPE_CONSTRUCT] Height undefined in options of shape, please set it!");if(void 0===s)return console.error("[3DSHAPE_CONSTRUCT] Width undefined in options of shape, please set it!");if(void 0===o)return console.error("[3DSHAPE_CONSTRUCT] Depth undefined in options of shape, please set it!");Physics.debugMode&&console.log("[3DSHAPE] Construct 3d shape hr: "+t+", wr: "+s+", dr: "+o+", size: "+(t+s+o)/3),this.center=new Physics.util.point3d(this.x-s,this.y-t,this.z-o),this.size=(t+s+o)/3,this.updateVertices=function(e,i){this.vertices=[new Physics.util.point3d(e.x-i,e.y-i,e.z+i),new Physics.util.point3d(e.x+i,e.y-i,e.z+i),new Physics.util.point3d(e.x+i,e.y+i,e.z+i),new Physics.util.point3d(e.x-i,e.y+i,e.z+i),new Physics.util.point3d(e.x,e.y+i,e.z)]},this.updateVertices(this.center,this.size),this.faces=[[this.vertices[3],this.vertices[0],this.vertices[1],this.vertices[2]],[this.vertices[0],this.vertices[1],this.vertices[4]],[this.vertices[0],this.vertices[3],this.vertices[4]],[this.vertices[2],this.vertices[3],this.vertices[4]],[this.vertices[2],this.vertices[1],this.vertices[4]]]}else console.error("[3DSHAPE_CONSTRUCT] Shape "+this.type+"not found. There may be errors rendering.");this.rotatePoint=function(e,i,t){if(void 0===e||void 0===i||void 0===t)return console.error("[3DPOINT_ROTCENTER] Theta x, y, or z undefined");this.x-=this.vertices[0].x-this.vertices[0].rotateCenter(e,i,t).x,this.y-=this.vertices[0].y-this.vertices[0].rotateCenter(e,i,t).y,this.z-=this.vertices[0].z-this.vertices[0].rotateCenter(e,i,t).z;for(var s=0;s<this.vertices.length;s++)this.vertices[s]=this.vertices[s].rotateCenter(e,i,t),this.vertices[s].x=Math.round(this.vertices[s].x),this.vertices[s].y=Math.round(this.vertices[s].y),this.vertices[s].z=Math.round(this.vertices[s].z);this.updateCoords()},this.rotateAxis=function(e,i,t){if(void 0===e||void 0===i||void 0===i)return console.error("[3DPOINT_ROTAXIS] Theta value for x, y, or z undefined");this.x-=this.vertices[0].x-this.vertices[0].rotateAxis(e,i,t).x,this.y-=this.vertices[0].y-this.vertices[0].rotateAxis(e,i,t).y,this.z-=this.vertices[0].z-this.vertices[0].rotateAxis(e,i,t).z;for(var s=0;s<this.vertices.length;s++)this.vertices[s]=this.vertices[s].rotateAxis(e,i,t),this.vertices[s].x=Math.round(this.vertices[s].x),this.vertices[s].y=Math.round(this.vertices[s].y),this.vertices[s].z=Math.round(this.vertices[s].z);this.updateCoords()},this.dilate=function(e){if(void 0===e)return console.error("[3DPOINT_DILATE] Multiplier undefined");this.x-=this.vertices[0].x-this.vertices[0].x*e,this.y-=this.vertices[0].y-this.vertices[0].y*e,this.z-=this.vertices[0].z-this.vertices[0].z*e;for(var i=0;i<this.vertices.length;i++)this.vertices[i].x=Math.round(this.vertices[i].x*e),this.vertices[i].y=Math.round(this.vertices[i].y*e),this.vertices[i].z=Math.round(this.vertices[i].z*e);this.updateCoords()},this.translate=function(e,i,t){void 0===e&&(e=0),void 0===i&&(i=0),void 0===t&&(t=0),this.x+=e,this.y+=i,this.z+=t;for(var s=0;s<this.vertices.length;s++)this.vertices[s].x=Math.round(this.vertices[s].x+e),this.vertices[s].y=Math.round(this.vertices[s].y+i),this.vertices[s].z=Math.round(this.vertices[s].z+t);this.updateCoords()},this.updateCoords=function(){if(this.faces.length<1)return console.error("[3DSHAPE_UPDATECOORDS] Faces length is less than 1");for(var e=[],i=0,t=this.faces.length;i<t;i++)for(var s=this.faces[i],o=this.camera.project(s[0]),h=1,r=s.length;h<r+1;++h){if(h==r)n=this.camera.project(s[0]);else var n=this.camera.project(s[h]);var c=Physics.util.line(o,n);Physics.debugMode&&console.log("[3DSHAPE_UPDATECOORDS] sP: "+JSON.stringify(o)+", fP: "+JSON.stringify(n)+", face: "+i+", vertice: "+h+", vcoord: "+JSON.stringify(c));for(var a=0;a<c.length;a++)e.push(c[a]);o=JSON.parse(JSON.stringify(n))}this.coords=e;var l=Physics.util.coords2mesh(e,"*");this.mesh=l.mesh,this.pointTable=l.pointTable,this.colorMesh=[""]},this.updateCoords(),this.pointTable.uniqueify(),this.update(),this.recalculateWeight()},cameras:{orthographic:function(){this.project=function(e){return e.projectOrtho()}},basic:function(){this.project=function(e){return e.projectBasic()}},perspective:function(e){if(void 0===e)return console.error("[CAMERA_PERSPECTIVE_SETUP] Distance undefined");this.distance=e,this.project=function(e){return e.projectDistance(Math.abs(this.distance))}}},util:{conversion:{conversionMultiplier:180/Math.PI,radian2degrees:function(e){return e*Physics.util.conversion.conversionMultiplier},degrees2radian:function(e){return e/Physics.util.conversion.conversionMultiplier}},asciitext:{fonts:{large:{0:{mesh:["   ____ ","  / __ \\"," / / / /","/ /_/ / ","\\____/  "],x:0,y:0,color:"red"},1:{mesh:["   ___","  <  /","  / / "," / /  ","/_/   "],x:0,y:0,color:"orange"},2:{mesh:["   ___ ","  |__ \\","  __/ /"," / __/ ","/____/ "],x:0,y:0,color:"yellow"},3:{mesh:["   _____","  |__  /","   /_ < "," ___/ / ","/____/  "],x:0,y:0,color:"green"},4:{mesh:["   __ __","  / // /"," / // /_","/__  __/","  /_/   "],x:0,y:0,color:"#00ccff"},5:{mesh:["    ______","   / ____/","  /___ \\  "," ____/ /  ","/_____/   "],x:0,y:0,color:"blue"},6:{mesh:["   _____","  / ___/"," / __ \\ ","/ /_/ / ","\\____/  "],x:0,y:0,color:"indigo"},7:{mesh:[" _____","/__  /","  / / "," / /  ","/_/   "],x:0,y:0},8:{mesh:["   ____ ","  ( __ )"," / __  |","/ /_/ / ","\\____/  "],x:0,y:0},9:{mesh:["   ____ ","  / __ \\"," / /_/ /"," \\__, / ","/____/  "],x:0,y:0}," ":{mesh:["  ","  ","  ","  ","  "],x:0,y:0,overrideSpacesInCustomShape:!0},l:{mesh:["    __                   __","   / /   ___ _   _____  / /","  / /   / _ \\ | / / _ \\/ / "," / /___/  __/ |/ /  __/ /  ","/_____/\\___/|___/\\___/_/   "],x:0,y:0}}},extranums:[],init:function(){for(var e=Object.keys(Physics.util.asciitext.fonts),i=0;i<e.length;i++)for(var t=Object.keys(Physics.util.asciitext.fonts[e[i]]),s=0;s<t.length;s++){var o=Physics.util.asciitext.fonts[e[i]][t[s]],h=new Physics.shape("custom",{mesh:o.mesh,x:o.x,y:o.y,color:void 0===o.color?"black":o.color,overrideRenderLimit:!0,overrideSpacesInCustomShape:void 0!==o.overrideSpacesInCustomShape&&o.overrideSpacesInCustomShape});delete Physics.util.asciitext.fonts[e[i]][t[s]],Physics.util.asciitext.fonts[e[i]][t[s]]=h}},generateText:function(e,i,t){void 0===t&&(t=Physics.util.asciitext.fonts.large),void 0===i&&(i=0);for(var s=[],o=i,h=[],r=0;r<String(e).length;r++)t[String(e)[r]]instanceof Physics.shape?s.contains(String(e)[r])?(Physics.util.asciitext.extranums[Physics.util.asciitext.extranums.length]=JSON.parse(JSON.stringify(t[String(e)[r]])),Physics.util.asciitext.extranums[Physics.util.asciitext.extranums.length-1].UUID=generateUUID(),Physics.util.asciitext.extranums[Physics.util.asciitext.extranums.length-1].x=o,o+=t[String(e)[r]].width,h.push(Physics.util.asciitext.extranums[Physics.util.asciitext.extranums.length-1])):(t[String(e)[r]].x=o,o+=t[String(e)[r]].width,h.push(t[String(e)[r]]),s[s.length]=String(e)[r]):console.error("[GEN_ASCII_TXT] Font character that has been selected is not initialized or doesn't exist in font. Character='"+String(e)[r]+"'");return h}},angleDisplay:function(e,i){},vectorDisplay:function(e,i,t,s){void 0===t&&(t=!1),void 0===s&&(s=1),this.centerPoint=e.centerPoint||[Physics.width/2,Physics.height/2],this.shape=e,this.vector=i,this.line=[],this.mesh=[""],this.UUID=generateUUID(),this.color="blue",this.multiplier=1,this.normalize=t,this.normmult=s,this.gravity=!1,this.onlyWriteNonemptyPixels=!0,this.colorMesh=["VecNotCompatible"],this.mx=Math.round(this.centerPoint[0]),this.my=Math.round(this.centerPoint[1]),this.shapeArrayNum=Physics.renderLoopShapes.length,Physics.renderLoopShapes[Physics.renderLoopShapes.length]=this,this.x=0,this.y=0,this.update=function(){this.centerPoint=this.shape.centerPoint||[Physics.width/2,Physics.height/2],this.mx=Math.round(this.centerPoint[0]),this.my=Math.round(this.centerPoint[1]);var e=JSON.parse(JSON.stringify(this.vector));e.normalize=this.vector.normalize,e.length=this.vector.length,e.divide=this.vector.divide,t&&(e=e.normalize(this.normmult));var i=new Physics.util.point2d(this.mx,this.my),s=new Physics.util.point2d((this.mx+e.x)*this.multiplier,(this.my+e.y)*this.multiplier),o=Physics.util.line(i,s),h=Physics.util.coords2mesh(o,"a");this.line=o,this.mesh=h.mesh,Physics.updateColorMeshOnVectorChange&&this.regenColorMesh(this.color)},this.update()},vec2d:function(e,i){return this.x=e||0,this.y=i||0,this.clone=function(){return new Physics.util.vec2d(this.x,this.y)},this.magnitude=this.length=function(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))},this.normalize=function(e){void 0===e&&(e=1);var i=this.length();return 0===i?(this.x=1,this.y=0):(this.divide(new Physics.util.vec2d(i,i)),this.x*=e,this.y*=e),this},this.limit=function(e,i){return Math.abs(this.x)>e&&(this.x*=i),Math.abs(this.y)>e&&(this.y*=i),this},this.HangleDeg=this.angleDegrees=this.angle=function(){return Physics.util.conversion.radian2degrees(Math.atan2(this.y,this.x))},this.HangleRad=this.angleRadians=function(){return Math.atan2(this.y,this.x)},this.VangleDeg=this.VangleDegrees=function(){return Physics.util.conversion.radian2degrees(Math.atan2(this.x,this.y))},this.VangleRad=this.VangleRadians=function(){return Math.atan2(this.x,this.y)},this.dot=function(e){return this.x*e.x+this.y*e.y},this.rotateDeg=this.rotateDegrees=function(e){var i=Physics.util.conversion.degrees2radian(e),t=this.x*Math.cos(i)-this.y*Math.sin(i),s=this.x*Math.sin(i)+this.y*Math.cos(i);return this.x=t,this.y=s,this},this.rotateRad=this.rotateRadians=function(e){var i=this.x*Math.cos(e)-this.y*Math.sin(e),t=this.x*Math.sin(e)+this.y*Math.cos(e);return this.x=i,this.y=t,this},this.cross=function(e){return this.x*e.y-this.y*e.x},this.distance=function(e){var i=this.x-e.x,t=this.y-e.y;return Math.sqrt(Math.pow(i,2)+Math.pow(t,2))},this.add=function(e){return this.x+=e.x,this.y+=e.y,this},this.mix=function(e,i){return void 0===i&&(i=.5),this.y=(1-i)*this.y+i*e.y,this.x=(1-i)*this.x+i*e.x,this},this.sub=this.subtract=function(e){return 0==e.x?this.x=0:this.x-=e.x,0==e.y?this.y=0:this.y-=e.y,this},this.multiply=function(e){return this.x*=e.x,this.y*=e.y,this},this.divide=function(e){return this.x/=e.x,this.y/=e.y,this},this},vec3d:function(){},point3d:function(e,i,t){this.x=e,this.y=i,this.z=t,this.projectOrtho=function(){return new Physics.util.point2d(this.x+this.z,this.y-this.z)},this.projectDistance=function(e){void 0===e&&(e=300);var i=e/this.y;return(i==1/0||isNaN(i)||void 0===i)&&(i=0,console.warn("[POINT3D_PROJECTDIST] r is outside bounds, bad things might happen")),new Physics.util.point2d(i*this.x,i*this.z)},this.projectBasic=function(){return new Physics.util.point2d(this.x,this.z)},this.rotateCenter=function(e,i,t){var s=Math.cos(i),o=Math.sin(i),h=Math.cos(t),r=Math.sin(t),n=this.x-e.x,c=this.y-e.y,a=this.z-e.z;return this.x=s*n-o*h*c+o*r*a+e.x,this.y=o*n+s*h*c-s*r*a+e.y,this.z=r*c+h*a+e.z,this},this.rotateAxis=function(e,i,t){var s=Math.sin(e),o=Math.cos(e),h=Math.sin(i),r=Math.cos(i),n=Math.sin(t),c=Math.cos(t),a=this.x,l=this.y,y=this.z;this.x=a*c-l*n,this.y=l*c+a*n;var a=this.x,y=this.z;this.x=a*r-y*h,this.z=y*r+a*h;var l=this.y,y=this.z;return this.y=l*o-y*s,this.z=y*o+l*s,this}},point2d:function(e,i){this.x=e,this.y=i},line:function(e,i){if(void 0===e.x||void 0===e.y||void 0!==e.z)return console.error("[UTIL3D_LINE] First 2d point is missing an argument or has a z value");if(void 0===i.x||void 0===i.y||void 0!==i.z)return console.error("[UTIL3D_LINE] Second 2d point is missing an argument or has a z value");e.x=Math.round(e.x),e.y=Math.round(e.y),i.x=Math.round(i.x),i.y=Math.round(i.y);var t=Math.abs(i.x-e.x),s=Math.abs(i.y-e.y),o=e.x<i.x?1:-1,h=e.y<i.y?1:-1,r=t-s,n=[],c=e.x,a=i.x,l=e.y,y=i.y,d=1e4;for(n.push([c,l]);(c!=a||l!=y)&&d>0;){d--;var u=r<<1;u>-s&&(r-=s,c+=o),u<t&&(r+=t,l+=h),n.push([c,l])}return n},coords2mesh:function(e,i,t){if(0==e.length)return console.error("[COORDS2MESH] Coordinates array length is 0");void 0===t&&(t=!1),void 0===i&&(console.warn("[COORDS2MESH] Character undefined, defaulting"),i=Physics.defaultShapeChar);for(var s=1e6,o=1e6,h=-1e6,r=-1e6,n=0;n<e.length;n++)e[n][0]<s?s=e[n][0]:e[n][0]>h&&(h=e[n][0]),e[n][1]<o?o=e[n][1]:e[n][1]>r&&(r=e[n][1]);0==s&&(s=1),0==o&&(o=1);var c=0;s<=0&&(c=Math.abs(s)+1);var a=0;if(o<=0&&(a=Math.abs(o)+1),Physics.debugMode&&console.log("[COORDS2MESH] xmin: "+s+", ymin: "+o+", xmax: "+h+", ymax: "+r+", shiftx: "+c+", shifty: "+a),t)for(var l=[],n=0;n<e.length;n++)l[n]=[Math.round(e[n][0]-s)+c,Math.round(e[n][1]-o)+a],l[n][0]<s?s=l[n][0]:l[n][0]>h&&(h=l[n][0]),l[n][1]<o?o=l[n][1]:l[n][1]>r&&(r=l[n][1]);else for(var l=[],n=0;n<e.length;n++)l[n]=[Math.round(e[n][0])+c,Math.round(e[n][1])+a],l[n][0]<s?s=l[n][0]:l[n][0]>h&&(h=l[n][0]),l[n][1]<o?o=l[n][1]:l[n][1]>r&&(r=l[n][1]);for(var y=[],d="",n=0;n<h+1;n++)d+=Physics.defaultSpaceChar;for(n=0;n<r+1;n++)y[n]=JSON.parse(JSON.stringify(d));for(n=0;n<l.length;n++){if(y.length<l[n][1]-1||y[0].length<l[n][0]-1||void 0===y[l[n][1]-1])return console.error("[COORDS2MESH] Point x: "+l[n][0]+", y: "+l[n][1]+", meshheight: "+y.length+", meshwidth: "+y[0].length+" doesn't exist in mesh");y[l[n][1]-1]=y[l[n][1]-1].replaceAt(l[n][0]-1,i)}return new Physics.shape("custom",{mesh:y,x:s,y:o})}},render:function(e){void 0===e&&(e=!1),Physics.now=Date.now();var i=Physics.now-Physics.nextRender,t=i>1e3/Physics.renderPerSecond;t&&(Physics.nextRender=Physics.now-i%(1e3/Physics.renderPerSecond));var s=Physics.now-Physics.nextUpdate,o=s>1e3/Physics.updatesPerSecond;if(o&&(Physics.nextUpdate=Physics.now-s%(1e3/Physics.updatesPerSecond)),Physics.charsPerFrame=0,e){Physics.renderBuffer=[];for(a=0;a<Physics.height;a++){Physics.renderBuffer[a]="";for(n=0;n<Physics.width;n++)Physics.renderBuffer[a]+=Physics.defaultSpaceChar}}for(var h=!1,r=[],n=0;n<arguments.length;n++)if(1!=arguments[n]&&0!=arguments[n])if("object"==typeof arguments[n]&&void 0===arguments[n].UUID&&arguments[n].length>0&&arguments[n].constructor===Array)for(var c=!1,a=0;a<arguments[n].length;a++)"object"==typeof arguments[n][a]&&void 0!==arguments[n][a].UUID?r.push(arguments[n][a]):(c=!0,console.error("[RENDER_PRE] Bad shape detected in array passed"));else h=!0,Physics.debugMode&&console.log("[RENDER_PRE] Discovered argument that is not array in render");if(0==h&&0==c){arguments=[];for(n=0;n<r.length;n++)Physics.debugMode&&console.log("[RENDER_PRE] Changing arguments passed into render because of array, i="+n),arguments[arguments.length]=r[n]}var l=[];if(Physics.renderInColor)for(n=0;n<arguments.length;n++);for(n=0;n<arguments.length;n++)if(1!=arguments[n]&&0!=arguments[n]&&void 0!==arguments[n]){try{(1==arguments[n].gravity||Physics.allGravity)&&(Physics.debugMode&&console.log("[RENDER_MAIN] Updating velocity for shape: "+arguments[n].type+", UUID: "+arguments[n].UUID+" (velX: "+arguments[n].velocity.x+", velY: "+arguments[n].velocity.y+")"),arguments[n].update(!1))}catch(e){console.error("[RENDER_MAIN] Error updating gravity for shape. Shape: "+arguments[n]+", e: "+e)}if(void 0===arguments[n].UUID)(0!=n||1!=arguments[n]&&0!=arguments[n])&&console.error("[RENDER_MAIN] Error drawing: argument "+n+" does not exist or doesn't have a UUID");else{h=!1;try{arguments[n].width=arguments[n].mesh[0].length,arguments[n].height=arguments[n].mesh.length}catch(e){h=!0,console.error("[RENDER_MAIN] Error rendering: argument "+n+" doesn't have a width or height property")}if((arguments[n].width>Physics.width||arguments[n].height>Physics.height)&&"colorbox"!=arguments[n].type&&(Physics.ignoreMeshSize?console.warn("[RENDER_MAIN] Warning: the IgnoreMeshSize flag is enabled. The mesh you are *attempting* to render is too large for the screen. Parts of what you are trying to render may be cut off. Normally, this would throw an error, but not anymore :)"):(h=!0,console.error("[RENDER_MAIN] Error rendering: argument "+n+"'s mesh is too large to fit on screen"))),0==h){var y=constrain(arguments[n].x,0,Physics.width-arguments[n].width),d=constrain(arguments[n].y,0,Physics.height-arguments[n].height);if(arguments[n].x=y,arguments[n].y=d,y=Math.round(y),d=Math.round(d),Physics.debugMode&&console.info("[RENDER_MAIN] Shape to be placed at x: "+y+", y: "+d),0==arguments[n].mesh.length||0==arguments[n].colorMesh.length)console.error("[RENDER_MAIN] Error rendering: shape has no mesh (or colorMesh) to render!");else if(t||0==e||arguments[n].overrideRenderLimit,!0)for(var u=Physics.renderInColor?arguments[n].colorMesh:arguments[n].mesh,a=0;a<u.length;a++)if(Physics.renderInColor){Physics.renderBuffer[a+d]=Physics.renderBuffer[a+d].slice(0,y)+arguments[n].colorMesh[a]+Physics.renderBuffer[a+d].slice(y);arguments[n].x,arguments[n].colorMesh[a].length;Physics.charsPerFrame+=arguments[n].colorMesh[a].length,Physics.debugMode&&console.log("[RENDER_RENDER] Adding to buffer (COLOR) at x: "+y+", y: "+(a+d)+", offset: "+JSON.stringify(l)+", j val: "+a+", chars: "+arguments[n].colorMesh[a])}else for(var p=0;p<u[a].length;p++){try{arguments[n].replaceWithSpace&&" "!=Physics.renderBuffer[a+d][p+y]?Physics.renderBuffer[a+d]=Physics.renderBuffer[a+d].replaceAt(p+y," "):arguments[n].onlyWriteNonemptyPixels?" "!=arguments[n].mesh[a][p]&&(Physics.renderBuffer[a+d]=Physics.renderBuffer[a+d].replaceAt(p+y,arguments[n].mesh[a][p]),Physics.charsPerFrame++):(Physics.renderBuffer[a+d]=Physics.renderBuffer[a+d].replaceAt(p+y,arguments[n].mesh[a][p]),Physics.charsPerFrame++)}catch(e){Physics.ignoreMeshSize||console.error("[RENDER_RENDER] Error while rendering physics buffer for shape "+arguments[n].type+", UUID "+arguments[n].UUID+", x: "+(p+y)+", y: "+(a+d)+", error: "+e)}Physics.debugMode&&console.log("[RENDER_RENDER] Adding to buffer (non-color) at x: "+(p+y)+", offset: "+JSON.stringify(l)+", j val: "+a+", y: "+(a+d)+", char: "+u[a][p])}}}}for(var f=Physics.startString,n=0;n<Physics.renderBuffer.length;n++)f+=Physics.renderBuffer[n]+Physics.defaultNewlineChar;if(Physics.charsPerFrame>0&&Physics.element.innerHTML!=f){Physics.renderString=Physics.startString;for(n=0;n<Physics.renderBuffer.length;n++)Physics.renderString+=Physics.renderBuffer[n]+Physics.defaultNewlineChar;Physics.element.innerHTML=Physics.renderString}},calculate_collisions:function(){for(var e=!1,i=[],t=0;t<arguments.length;t++)if("object"==typeof arguments[t]&&void 0===arguments[t].UUID&&arguments[t].length>0&&arguments[t].constructor===Array)for(var s=!1,o=0;o<arguments[t].length;o++)"object"==typeof arguments[t][o]&&void 0!==arguments[t][o].UUID?i.push(arguments[t][o]):(s=!0,console.error("[COLL_PRE] Bad shape detected in array passed"));else e=!0,Physics.debugMode&&console.log("[COLL_PRE] Discovered argument that is not array in check collisions");if(0==e&&0==s){arguments=[];for(t=0;t<i.length;t++)Physics.debugMode&&console.log("[COLL_PRE] Changing arguments passed into render because of array, i="+t),arguments[arguments.length]=i[t]}if(arguments.length<2)console.error("[COLL_MAIN] Error while calculating collisions: there is only one (or none) shape passed into the function.");else{Physics.now=Date.now();var h=Physics.now-Physics.nextTick,r=h>1e3/Physics.ticksPerSecond;if(r&&(Physics.nextTick=Physics.now-h%(1e3/Physics.ticksPerSecond)),r){var n=0;Physics.inefficientArr=[];for(t=0;t<arguments.length;t++)arguments[t].collisionBottom=!1,arguments[t].collisionTop=!1,arguments[t].collisionRight=!1,arguments[t].collisionLeft=!1;for(t=0;t<arguments.length;t++){arguments[t].calculate();for(o=1;o<arguments.length-1;o++)if(1==o&&arguments[o].calculate(),void 0!==arguments[t]&&void 0!==arguments[o]&&arguments[t]!==arguments[o])switch(Physics.debugMode&&console.log("[COLL_MAIN] Arguments evaluating for collision type: "+arguments[t].type+" "+arguments[o].type),Physics.moreEfficientPhysics?arguments[t].type+" "+arguments[o].type:"nomatch"){case"box box":arguments[t].x<arguments[o].x+arguments[o].width&&arguments[t].x+arguments[t].width>arguments[o].x&&arguments[t].y<arguments[o].y+arguments[o].height&&arguments[t].height+arguments[t].y>arguments[o].y&&Physics.determineCollisionSide(arguments[t],arguments[o]);break;case"line box":arguments[t].x<arguments[o].x+arguments[o].width&&arguments[t].x+arguments[t].length>arguments[o].x&&arguments[t].y<arguments[o].y+arguments[o].height&&1+arguments[t].y>arguments[o].y&&Physics.determineCollisionSide(arguments[t],arguments[o]);break;case"box line":arguments[t].x<arguments[o].x+arguments[o].length&&arguments[t].x+arguments[t].width>arguments[o].x&&arguments[t].y<arguments[o].y+1&&arguments[t].height+arguments[t].y>arguments[o].y&&Physics.determineCollisionSide(arguments[t],arguments[o]);break;case"line line":arguments[t].x<arguments[o].x+arguments[o].length&&arguments[t].x+arguments[t].length>arguments[o].x&&arguments[t].y<arguments[o].y+1&&1+arguments[t].y>arguments[o].y&&Physics.determineCollisionSide(arguments[t],arguments[o]);break;case"circle circle":case"line circle":case"circle line":case"box circle":case"circle box":break;default:n++,Physics.inefficientArr[Physics.inefficientArr.length]=arguments[t],Physics.inefficientArr[Physics.inefficientArr.length]=arguments[o]}}for(t=0;t<Physics.inefficientArr.length;t+=2)void 0!==Physics.inefficientArr[t]&&void 0!==Physics.inefficientArr[t+1]?Physics.calculate_collisions_narrow(Physics.inefficientArr[t],Physics.inefficientArr[t+1]):(console.error("[COLL_NARROW] Physics coll i+1 val missing, calculating with previous argument"),Physics.calculate_collisions_narrow(Physics.innefficientArr[t],Physics.inefficientArr[t-1]));Physics.debugMode&&console.log("[COLL_MAIN] Physics collision checking ineffifiency: "+n/Math.pow(arguments.length,2)*100+"%, inefficiently processed args: "+n+", args: "+arguments.length),Physics.collisionEfficiency=100-n/Math.pow(arguments.length,2)*100}}},calculate_collisions_mid:function(){},calculate_collisions_narrow:function(){if(arguments.length<2)console.error("[COLL_NARROW] Error while calculating collisions: there is only one (or none) shape passed into function.");else for(var e=0;e<arguments.length;e++)for(var i=1;i<arguments.length;i++)for(var t=0;t<arguments[e].updPointTable.length;t++)for(var s=0;s<arguments[i].updPointTable.length;s++){var o=arguments[e].updPointTable[t][0]-arguments[i].updPointTable[s][0],h=arguments[e].updPointTable[t][1]-arguments[i].updPointTable[s][1];o>-Physics.collisionAccuracy&&o<Physics.collisionAccuracy&&h>-Physics.collisionAccuracy&&h<Physics.collisionAccuracy&&arguments[e].UUID!=arguments[i].UUID&&(Physics.debugMode&&console.log("[COLL_NARROW] Collision detected between "+arguments[e].type+" (UUID: "+arguments[e].UUID+") and "+arguments[i].type+" (UUID: "+arguments[i].UUID+"), X1: "+arguments[e].updPointTable[t][0]+", Y1: "+arguments[e].updPointTable[t][1]+", X2: "+arguments[i].updPointTable[s][0]+", Y2: "+arguments[i].updPointTable[s][0]),Physics.determineCollisionSideFromPoint(arguments[e],arguments[i],t,s))}},determineCollisionSideFromPoint:function(e,i,t,s){e.collide&&(0==e.collisionRight&&0==e.collisionLeft&&(e.updPointTable[t][0]<=e.centerPoint[0]?(e.collisionRight=!1,e.collisionLeft=!0):e.updPointTable[t][0]>e.centerPoint[0]?(e.collisionRight=!0,e.collisionLeft=!1):(console.error("[COLL_DETERMINESIDE] Error calculating collision side from collision (x axis), try running update on shape "+e.type+", UUID "+e.UUID),e.calculate())),0==e.collisionTop&&0==e.collisionBottom&&(e.updPointTable[t][1]<=e.centerPoint[1]||e.y+e.height==Physics.height?(e.collisionBottom=!0,e.collisionTop=!1):e.updPointTable[t][1]>e.centerPoint[1]?(e.collisionBottom=!1,e.collisionTop=!0):(console.error("[COLL_DETERMINESIDE] Error calculating collision side from collision (y axis), try running update on shape "+e.type+", UUID "+e.UUID),e.calculate()))),i.collide&&(0==i.collisionRight&&0==i.collisionLeft&&(i.updPointTable[s][0]<=i.centerPoint[0]?(i.collisionRight=!1,i.collisionLeft=!0):i.updPointTable[s][0]>i.centerPoint[0]?(i.collisionRight=!0,i.collisionLeft=!1):(console.error("[COLL_DETERMINESIDE] Error calculating collision side from collision (x axis), try running update on shape "+i.type+", UUID "+i.UUID+"Point X: "+i.updPointTable[t][0]+", center X: "+i.centerPoint[0]),i.calculate())),0==i.collisionTop&&0==i.collisionBottom&&(i.updPointTable[s][1]<=i.centerPoint[1]||i.y+i.height==Physics.height?(i.collisionBottom=!0,i.collisionTop=!1):i.updPointTable[s][1]>i.centerPoint[1]?(i.collisionBottom=!1,i.collisionTop=!0):(console.error("[COLL_DETERMINESIDE] Error calculating collision side from collision (y axis), try running update on shape "+i.type+", UUID "+i.UUID),i.calculate()))),Physics.debugMode&&console.log("[COLL_DETERMINESIDE] Shape 1 updPointTable "+JSON.stringify(e.updPointTable[t])+", Shape 2 updPointTable "+JSON.stringify(i.updPointTable[s])+", Shape 1 centerPoint "+JSON.stringify(e.centerPoint)+", Shape 2 centerPoint "+JSON.stringify(i.centerPoint)+", Shape 1 collide "+e.collide+", Shape 2 collide "+i.collide)},determineCollisionSide:function(e,i){e.centerPoint[0]<=i.centerPoint[0]&&(e.collisionLeft=!0,e.collisionRight=!1,i.collisionRight=!0,i.collisionLeft=!1),e.centerPoint[0]<=i.centerPoint[0]&&(e.collisionBottom=!0,e.collisionTop=!1,i.collisionTop=!0,i.collisionBottom=!1)},init:function(){mouseOffsetX=Physics.element.offsetLeft,mouseOffsetY=Physics.element.offsetTop+100,document.body.onmousedown=function(){mouseDown=!0},document.body.onmouseup=function(){mouseDown=!1};for(var e=0;e<notLoadedVectors.length;e++)Physics.debugMode,console.log("[INIT] Fixing notLoadedVector '"+notLoadedVectors[e][0]+"'"),Physics[notLoadedVectors[e][0]]=new Physics.util.vec2d(notLoadedVectors[e][1],notLoadedVectors[e][2]);delete notLoadedVectors,Physics.util.asciitext.init(),console.typeable("debugon",'console.log("[INIT] Type debugon into the console to enable debug mode. (Warning: there is about 1000 debug messages outputted per second)");','console.log("Debug mode active."); Physics.debugMode = true;'),console.typeable("debugoff",'console.log("[INIT] Type debugoff into the console to disable debug mode.");','console.log("Debug mode disabled."); Physics.debugMode = false;'),console.typeable("debug2s","console.log('[INIT] Type debug2s into the console to perform auto-test of code for 2s and then stop it. (Mostly for debugging broken things in render loop)');","console.clear(); debugon; setTimeout(function(){debugoff;},2000);"),Physics.element.style.lineHeight=String(Physics.lineHeight),Physics.height=Math.round(window.innerHeight*(Physics.lineHeight-.53)),Physics.width=Math.round(window.innerWidth*(Physics.lineHeight-.523)),Physics.bodyFontSize=parseFloat(window.getComputedStyle(document.body,null).getPropertyValue("font-size"))},clear:function(){Physics.renderBuffer=[],Physics.element.innerHTML=""},renderLoop:function(e){function i(e,i,t){e.renderFunction=function(){e.runLoop&&requestAnimationFrame(e.renderFunction);var s=1e3/e.options.fps,o=Date.now(),h=o-Physics.renderLoopPasts[i];if(h>s){Physics.renderLoopPasts[i]=o-h%s;e.options.clear;for(var r=[],n=1;n<t.length;n++){try{Physics.debugMode&&console.log("[CREATERENDERLOOP] Args into renderloop i: "+n+", arg: "+JSON.stringify(t[n]))}catch(e){}r.push(Physics.renderLoopShapes[t[n].shapeArrayNum])}e.firstRun&&(Physics.debugMode&&console.log("[RENDERLOOP_CREATE] firstrun renderloopauto: "+JSON.stringify(r)),Physics.render(!0,r),e.firstRun=!1),Physics.debugMode&&console.log("[RENDERLOOP_CREATE] shapesarr: "+JSON.stringify(r)),e.options.collision&&Physics.calculate_collisions(r);try{Physics.render(e.options.clear,r)}catch(e){console.error("[RENDERLOOP_LOOP] Error executing render function for renderLoop. E: '"+e+"'")}if(e.options.executeOnFrame)try{e.options.onFrame(e)}catch(i){e.options.executeOnFrame=!1,console.error("[RENDERLOOP_LOOP] Error executing onFrame function for renderLoop. E: '"+i+"'")}}},requestAnimationFrame(function(){e.renderFunction()})}var t=arguments;e.fps=e.fps||60,void 0===e.collision&&(e.collision=!0),void 0===e.onFrame?(e.onFrame=function(){},e.executeOnFrame=!1):e.executeOnFrame=!0,void 0===e.clear&&(e.clear=!0),e.queueNum=Physics.renderLoopNext,Physics.renderLoopPasts[e.queueNum]=Date.now(),this.options=e,this._this=this,this.runLoop=!0,this.args=t,this.firstRun=!0;this.start=function(){this.runLoop=!0,i(this,this.options.queueNum,this.args)},this.stop=function(){this.runLoop=!1},Physics.renderLoopNext++}};Physics.shape.prototype.update=Physics.shape3d.prototype.update=function(e){this.calculate();var i=Physics.forceAverageDelta?(Physics.oldDelta+(Date.now()-Physics.lastUpdate)/(1e3/Physics.updatesPerSecond))/2:(Date.now()-Physics.lastUpdate)/(1e3/Physics.updatesPerSecond);Physics.oldDelta=i;Physics.frictionConstant.x,Physics.gravitationalConstant.y;if(e=e||!1,void 0===this.gravity||void 0===this.velocity.x||void 0===this.velocity.y)console.error("[PHYSICS_UPDATE] Object passed in to update function has no gravity constants");else{if(this.gravity||Physics.allGravity){this.velocity.x=constrain(this.velocity.x,-Physics.terminalVelocity,Physics.terminalVelocity),this.velocity.y=constrain(this.velocity.y,-Physics.terminalVelocity,Physics.terminalVelocity),this.y+this.height==Physics.height&&(this.velocity.y=0);(void 0===this.mass||Physics.recalculateWeightOnFrame)&&this.recalculateWeight(),this.y+=Physics.enableDeltaTimeCalculations?Physics.simpleDeltaCalculations?this.velocity.y*i:this.velocity.y*(Math.pow(.99,i*i)-1)/(i*Math.log(.99)):this.velocity.y,this.x+=Physics.enableDeltaTimeCalculations?Physics.simpleDeltaCalculations?this.velocity.x*i:this.velocity.x*(Math.pow(.99,i*i)-1)/(i*Math.log(.99)):this.velocity.x,Physics.debugMode&&(console.log("[PHYSICS_UPDATE] Complex calculations for x pos change: "+String(this.velocity.x*(Math.pow(.99,i*i)-1)/(i*Math.log(.99)))+" Simple calculations for x pos change: "+this.velocity.x*i),console.log("[PHYSICS_UPDATE] Complex calculations for y pos change: "+String(this.velocity.y*(Math.pow(.99,i*i)-1)/(i*Math.log(.99)))+" Simple calculations for y pos change: "+this.velocity.y*i),console.log("[PHYSICS_UPDATE] Δtime: "+i)),this.collisionBottom||this.collisionTop?this.velcocity.y=-.25:(this.velocity.y<=Physics.terminalVelocity&&this.velocity.y>=-Physics.terminalVelocity&&(this.velocity.y+=this.weight),(this.collisionRight||this.collisionLeft)&&(this.velocity.x=0)),this.velocity.x<Physics.frictionConstant.x&&this.velocity.x>-Physics.frictionConstant.x&&(this.velocity.x=0),this.velocity.y<Physics.gravitationalConstant.y&&this.velocity.y>Physics.gravitationalConstant.y&&(this.velocity.y=0),0!=this.collisionRight&&0!=this.collisionLeft||this.velocity.x<=Physics.terminalVelocity&&this.velocity.x>=-Physics.terminalVelocity&&(this.velocity.x>0?this.velocity.x-=this.friction:this.velocity.x<0&&(this.velocity.x+=this.friction))}this.height+this.y==Physics.height&&(this.velocity.y=0)}Physics.lastUpdate=Date.now(),e&&Physics.render(!1,this)},Physics.shape.prototype.calculate=Physics.shape3d.prototype.calculate=function(){if(void 0===this.pointTable||void 0===this.updPointTable)console.error("[PHYSICS_CALCULATE] No point table or updatePointTable object found");else{this.updPointTable=[];for(var e=0;e<this.pointTable.length;e++)this.updPointTable[e]=[],2==this.pointTable[e].length?(this.updPointTable[e][0]=this.pointTable[e][0]+this.x,this.updPointTable[e][1]=this.pointTable[e][1]+this.y):console.error("[PHYSICS_CALCULATE] Point table i:"+e+" has an invalid point length, not 2")}this.centerPoint=[this.updPointTable[0][0]+.5*(this.width||this.radius||this.length||this.height||0),this.updPointTable[0][1]+.5*(this.height||this.radius||this.length||this.width||0)]},Physics.shape.prototype.regenColorMesh=Physics.shape3d.prototype.regenColorMesh=Physics.util.vectorDisplay.prototype.regenColorMesh=function(e){this.colorMesh=[],this.color=e;for(var i=0;i<this.mesh.length;i++){this.colorMesh[i]="";for(var t=0;t<this.mesh[i].length;t++)"custom"==this.type&&" "!==this.mesh[i][t]?this.colorMesh[i]+="<span style='color: "+this.color+";'>"+this.mesh[i][t]+"</span>":this.mesh[i][t]==this.character?this.colorMesh[i]+="<span style='color: "+this.color+";'>"+this.character+"</span>":this.colorMesh[i]+=Physics.defaultSpaceChar}},Physics.shape.prototype.recalculateWeight=Physics.shape3d.prototype.recalculateWeight=Physics.util.vectorDisplay.prototype.recalculateWeight=function(){for(var e=0,i=0;i<this.mesh.length;i++)for(var t=0;t<this.mesh[i].length;t++)this.mesh[i][t]==this.character&&e++;Physics.debugMode&&console.log("[PHYSICS_RECALCWEIGHT] Recalculate Chars for shape, chars= "+e+", UUID= "+this.UUID),this.characters=Math.sqrt(e),this.mass=this.characters*Physics.weightPerCharacter,this.weight=Physics.gravitationalConstant.y*this.mass,this.friction=Physics.frictionConstant.x*this.weight},Physics.shape.prototype.moveTowardsObject=Physics.shape3d.prototype.moveTowardsObject=function(e,i){i=Math.abs(i);var t=-(this.x+(this.width||this.length)/2-e.x);t<0&&t<-i?t=-i:t>0&&t>i&&(t=i),(this.enableRight&&t>0||this.enableLeft&&t<0)&&(this.x+=t);var s=-(this.y+this.height/2-e.y);s<0&&s<-i?s=-i:s>0&&s>i&&(s=i),(this.enableUp&&s<0||this.enableDown&&s>0)&&(this.y+=s),Physics.debugMode&&console.log("[CONTROL_MOVEOBJ] movetowards object diffx: "+t+", diffy: "+s)};var play=[],timeSinceUpKey,timeBetweenJumps=900,lastKeyPress=Date.now(),map={};Physics.shape.prototype.controlGravity=Physics.shape3d.prototype.controlRaw=function(){play=this,window.onkeydown=window.onkeyup=function(e){var e=window.event?window.event:e;if(map[e.keyCode]="keydown"==e.type,(map[37]||map[38]||map[39]||map[40])&&e.preventDefault(),map[38]&&play.enableUp){timeSinceUpKey=Date.now()-lastKeyPress,play.velocity.y<Physics.gravitationalConstant.y&&timeSinceUpKey>timeBetweenJumps&&(lastKeyPress=Date.now(),play.y-=2,setTimeout(function(){play.velocity.y=-3},50));try{0!=lvlnum&&"title"!=lvlnum||(play.velocity.y=-2.5)}catch(e){}}if(map[40]&&play.enableDown){(play.y+play.height==Physics.height||play.velocity.y<Physics.gravitationalConstant.y)&&(play.velocity.y=3);try{0!=lvlnum&&"title"!=lvlnum||(play.velocity.y=3)}catch(e){}}map[37]&&play.enableLeft&&play.velocity.x<Physics.terminalVelocity&&play.velocity.x>-Physics.terminalVelocity&&(play.velocity.x=-3),map[39]&&play.enableRight&&play.velocity.x<Physics.terminalVelocity&&play.velocity.x>-Physics.terminalVelocity&&(play.velocity.x=3)}};var playraw=[],mapraw={};Physics.shape.prototype.controlRaw=Physics.shape3d.prototype.controlRaw=function(e){playraw=this,window.onkeydown=window.onkeyup=function(i){var i=window.event?window.event:i;map[i.keyCode]="keydown"==i.type,(map[37]||map[38]||map[39]||map[40])&&i.preventDefault(),map[38]&&playraw.enableUp&&(playraw.y-=1*e),map[40]&&playraw.enableDown&&(playraw.y+=1*e),map[37]&&playraw.enableLeft&&(playraw.x-=1*e),map[39]&&playraw.enableRight&&(playraw.x+=1*e)}};var mousePos,mouseOffsetX,mouseOffsetY,mouseDown=!1,relMousePos={x:0,y:0},playmouse=[];Physics.shape.prototype.controlMouse=Physics.shape3d.prototype.controlMouse=function(){playmouse=this,document.onmousemove=function(e){handleMouseMove(e),playmouse.enableUp&&relMousePos.y<=playmouse.y&&(playmouse.y=relMousePos.y),playmouse.enableDown&&relMousePos.y>=playmouse.y&&(playmouse.y=relMousePos.y),playmouse.enableLeft&&relMousePos.x<=playmouse.x&&(playmouse.x=relMousePos.x),playmouse.enableRight&&relMousePos.x>=playmouse.x&&(playmouse.x=relMousePos.x)}};